// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package agones.dev.sdk.alpha;
option go_package = "alpha";

import "google/api/annotations.proto";

// SDK service to be used in the GameServer SDK to the Pod Sidecar.
service SDK {
    // Call when a player has connected.
    rpc PlayerConnect (PlayerId) returns (Empty) {
        option (google.api.http) = {
            post: "/alpha/player/connect"
            body: "*"
        };
    }

    // Call when a player has disconnected.
    rpc PlayerDisconnect (PlayerId) returns (Empty) {
        option (google.api.http) = {
            post: "/alpha/player/disconnect"
            body: "*"
        };
    }

    // Change the player capacity to a new value.
    rpc SetPlayerCapacity (Count) returns (Empty) {
        option (google.api.http) = {
            post: "/alpha/player/capacity"
            body: "*"
        };
    }

    // Get the last player capacity that was set through the SDK.
    // If the player capacity is set from outside the SDK, use SDK.GameServer() instead.
    rpc GetPlayerCapacity(Empty) returns (Count) {
        option (google.api.http) = {
            get: "/alpha/player/capacity"
        };
    }

    // get the current player count
    rpc GetPlayerCount(Empty) returns (Count) {
        option (google.api.http) = {
            get: "/alpha/player/count"
        };
    }
}

// I am Empty
message Empty {
}

// Store a count variable.
message Count {
    int64 count = 1;
}

// The unique identifier for a given player.
message PlayerId {
    string playerId = 1;
}