// Copyright 2020 Google LLC All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was autogenerated. Do not edit directly.
// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/allocation/v1alpha1/allocation.proto

package v1alpha1

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "google.golang.org/genproto/googleapis/api/annotations"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllocationRequest_SchedulingStrategy int32

const (
	AllocationRequest_Packed      AllocationRequest_SchedulingStrategy = 0
	AllocationRequest_Distributed AllocationRequest_SchedulingStrategy = 1
)

var AllocationRequest_SchedulingStrategy_name = map[int32]string{
	0: "Packed",
	1: "Distributed",
}
var AllocationRequest_SchedulingStrategy_value = map[string]int32{
	"Packed":      0,
	"Distributed": 1,
}

func (x AllocationRequest_SchedulingStrategy) String() string {
	return proto.EnumName(AllocationRequest_SchedulingStrategy_name, int32(x))
}
func (AllocationRequest_SchedulingStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{0, 0}
}

type AllocationRequest struct {
	// The k8s namespace that is hosting the targeted fleet of gameservers to be allocated
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// If specified, multi-cluster policies are applied. Otherwise, allocation will happen locally.
	MultiClusterSetting *MultiClusterSetting `protobuf:"bytes,2,opt,name=multiClusterSetting,proto3" json:"multiClusterSetting,omitempty"`
	// The required allocation. Defaults to all GameServers.
	RequiredGameServerSelector *LabelSelector `protobuf:"bytes,3,opt,name=requiredGameServerSelector,proto3" json:"requiredGameServerSelector,omitempty"`
	// The ordered list of preferred allocations out of the `required` set.
	// If the first selector is not matched, the selection attempts the second selector, and so on.
	PreferredGameServerSelectors []*LabelSelector `protobuf:"bytes,4,rep,name=preferredGameServerSelectors,proto3" json:"preferredGameServerSelectors,omitempty"`
	// Scheduling strategy. Defaults to "Packed".
	Scheduling AllocationRequest_SchedulingStrategy `protobuf:"varint,5,opt,name=scheduling,proto3,enum=v1alpha1.AllocationRequest_SchedulingStrategy" json:"scheduling,omitempty"`
	// MetaPatch is optional custom metadata that is added to the game server at
	// allocation You can use this to tell the server necessary session data
	MetaPatch            *MetaPatch `protobuf:"bytes,6,opt,name=metaPatch,proto3" json:"metaPatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AllocationRequest) Reset()         { *m = AllocationRequest{} }
func (m *AllocationRequest) String() string { return proto.CompactTextString(m) }
func (*AllocationRequest) ProtoMessage()    {}
func (*AllocationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{0}
}
func (m *AllocationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationRequest.Unmarshal(m, b)
}
func (m *AllocationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationRequest.Marshal(b, m, deterministic)
}
func (dst *AllocationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRequest.Merge(dst, src)
}
func (m *AllocationRequest) XXX_Size() int {
	return xxx_messageInfo_AllocationRequest.Size(m)
}
func (m *AllocationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRequest proto.InternalMessageInfo

func (m *AllocationRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AllocationRequest) GetMultiClusterSetting() *MultiClusterSetting {
	if m != nil {
		return m.MultiClusterSetting
	}
	return nil
}

func (m *AllocationRequest) GetRequiredGameServerSelector() *LabelSelector {
	if m != nil {
		return m.RequiredGameServerSelector
	}
	return nil
}

func (m *AllocationRequest) GetPreferredGameServerSelectors() []*LabelSelector {
	if m != nil {
		return m.PreferredGameServerSelectors
	}
	return nil
}

func (m *AllocationRequest) GetScheduling() AllocationRequest_SchedulingStrategy {
	if m != nil {
		return m.Scheduling
	}
	return AllocationRequest_Packed
}

func (m *AllocationRequest) GetMetaPatch() *MetaPatch {
	if m != nil {
		return m.MetaPatch
	}
	return nil
}

type AllocationResponse struct {
	GameServerName       string                                     `protobuf:"bytes,2,opt,name=gameServerName,proto3" json:"gameServerName,omitempty"`
	Ports                []*AllocationResponse_GameServerStatusPort `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	Address              string                                     `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	NodeName             string                                     `protobuf:"bytes,5,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *AllocationResponse) Reset()         { *m = AllocationResponse{} }
func (m *AllocationResponse) String() string { return proto.CompactTextString(m) }
func (*AllocationResponse) ProtoMessage()    {}
func (*AllocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{1}
}
func (m *AllocationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationResponse.Unmarshal(m, b)
}
func (m *AllocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationResponse.Marshal(b, m, deterministic)
}
func (dst *AllocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationResponse.Merge(dst, src)
}
func (m *AllocationResponse) XXX_Size() int {
	return xxx_messageInfo_AllocationResponse.Size(m)
}
func (m *AllocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationResponse proto.InternalMessageInfo

func (m *AllocationResponse) GetGameServerName() string {
	if m != nil {
		return m.GameServerName
	}
	return ""
}

func (m *AllocationResponse) GetPorts() []*AllocationResponse_GameServerStatusPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *AllocationResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AllocationResponse) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

// The gameserver port info that is allocated.
type AllocationResponse_GameServerStatusPort struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationResponse_GameServerStatusPort) Reset() {
	*m = AllocationResponse_GameServerStatusPort{}
}
func (m *AllocationResponse_GameServerStatusPort) String() string { return proto.CompactTextString(m) }
func (*AllocationResponse_GameServerStatusPort) ProtoMessage()    {}
func (*AllocationResponse_GameServerStatusPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{1, 0}
}
func (m *AllocationResponse_GameServerStatusPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationResponse_GameServerStatusPort.Unmarshal(m, b)
}
func (m *AllocationResponse_GameServerStatusPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationResponse_GameServerStatusPort.Marshal(b, m, deterministic)
}
func (dst *AllocationResponse_GameServerStatusPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationResponse_GameServerStatusPort.Merge(dst, src)
}
func (m *AllocationResponse_GameServerStatusPort) XXX_Size() int {
	return xxx_messageInfo_AllocationResponse_GameServerStatusPort.Size(m)
}
func (m *AllocationResponse_GameServerStatusPort) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationResponse_GameServerStatusPort.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationResponse_GameServerStatusPort proto.InternalMessageInfo

func (m *AllocationResponse_GameServerStatusPort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AllocationResponse_GameServerStatusPort) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Specifies settings for multi-cluster allocation.
type MultiClusterSetting struct {
	// If set to true, multi-cluster allocation is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Selects multi-cluster allocation policies to apply. If not specified, all multi-cluster allocation policies are to be applied.
	PolicySelector       *LabelSelector `protobuf:"bytes,2,opt,name=policySelector,proto3" json:"policySelector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MultiClusterSetting) Reset()         { *m = MultiClusterSetting{} }
func (m *MultiClusterSetting) String() string { return proto.CompactTextString(m) }
func (*MultiClusterSetting) ProtoMessage()    {}
func (*MultiClusterSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{2}
}
func (m *MultiClusterSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiClusterSetting.Unmarshal(m, b)
}
func (m *MultiClusterSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiClusterSetting.Marshal(b, m, deterministic)
}
func (dst *MultiClusterSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiClusterSetting.Merge(dst, src)
}
func (m *MultiClusterSetting) XXX_Size() int {
	return xxx_messageInfo_MultiClusterSetting.Size(m)
}
func (m *MultiClusterSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiClusterSetting.DiscardUnknown(m)
}

var xxx_messageInfo_MultiClusterSetting proto.InternalMessageInfo

func (m *MultiClusterSetting) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *MultiClusterSetting) GetPolicySelector() *LabelSelector {
	if m != nil {
		return m.PolicySelector
	}
	return nil
}

// MetaPatch is the metadata used to patch the GameServer metadata on allocation
type MetaPatch struct {
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations          map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MetaPatch) Reset()         { *m = MetaPatch{} }
func (m *MetaPatch) String() string { return proto.CompactTextString(m) }
func (*MetaPatch) ProtoMessage()    {}
func (*MetaPatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{3}
}
func (m *MetaPatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaPatch.Unmarshal(m, b)
}
func (m *MetaPatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaPatch.Marshal(b, m, deterministic)
}
func (dst *MetaPatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaPatch.Merge(dst, src)
}
func (m *MetaPatch) XXX_Size() int {
	return xxx_messageInfo_MetaPatch.Size(m)
}
func (m *MetaPatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaPatch.DiscardUnknown(m)
}

var xxx_messageInfo_MetaPatch proto.InternalMessageInfo

func (m *MetaPatch) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetaPatch) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

// LabelSelector used for finding a GameServer with matching labels.
type LabelSelector struct {
	// Labels to match.
	MatchLabels          map[string]string `protobuf:"bytes,1,rep,name=matchLabels,proto3" json:"matchLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LabelSelector) Reset()         { *m = LabelSelector{} }
func (m *LabelSelector) String() string { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()    {}
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_allocation_a8b682e2fff83ddc, []int{4}
}
func (m *LabelSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelSelector.Unmarshal(m, b)
}
func (m *LabelSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelSelector.Marshal(b, m, deterministic)
}
func (dst *LabelSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelSelector.Merge(dst, src)
}
func (m *LabelSelector) XXX_Size() int {
	return xxx_messageInfo_LabelSelector.Size(m)
}
func (m *LabelSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelSelector.DiscardUnknown(m)
}

var xxx_messageInfo_LabelSelector proto.InternalMessageInfo

func (m *LabelSelector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocationRequest)(nil), "v1alpha1.AllocationRequest")
	proto.RegisterType((*AllocationResponse)(nil), "v1alpha1.AllocationResponse")
	proto.RegisterType((*AllocationResponse_GameServerStatusPort)(nil), "v1alpha1.AllocationResponse.GameServerStatusPort")
	proto.RegisterType((*MultiClusterSetting)(nil), "v1alpha1.MultiClusterSetting")
	proto.RegisterType((*MetaPatch)(nil), "v1alpha1.MetaPatch")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.MetaPatch.AnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.MetaPatch.LabelsEntry")
	proto.RegisterType((*LabelSelector)(nil), "v1alpha1.LabelSelector")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.LabelSelector.MatchLabelsEntry")
	proto.RegisterEnum("v1alpha1.AllocationRequest_SchedulingStrategy", AllocationRequest_SchedulingStrategy_name, AllocationRequest_SchedulingStrategy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AllocationServiceClient is the client API for AllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllocationServiceClient interface {
	Allocate(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*AllocationResponse, error)
}

type allocationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAllocationServiceClient(cc *grpc.ClientConn) AllocationServiceClient {
	return &allocationServiceClient{cc}
}

func (c *allocationServiceClient) Allocate(ctx context.Context, in *AllocationRequest, opts ...grpc.CallOption) (*AllocationResponse, error) {
	out := new(AllocationResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.AllocationService/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocationServiceServer is the server API for AllocationService service.
type AllocationServiceServer interface {
	Allocate(context.Context, *AllocationRequest) (*AllocationResponse, error)
}

func RegisterAllocationServiceServer(s *grpc.Server, srv AllocationServiceServer) {
	s.RegisterService(&_AllocationService_serviceDesc, srv)
}

func _AllocationService_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.AllocationService/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).Allocate(ctx, req.(*AllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.AllocationService",
	HandlerType: (*AllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _AllocationService_Allocate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/allocation/v1alpha1/allocation.proto",
}

func init() {
	proto.RegisterFile("proto/allocation/v1alpha1/allocation.proto", fileDescriptor_allocation_a8b682e2fff83ddc)
}

var fileDescriptor_allocation_a8b682e2fff83ddc = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0x13, 0x92, 0x89, 0x28, 0x61, 0x5b, 0x09, 0xcb, 0x04, 0x88, 0x0c, 0x42, 0xa1,
	0x07, 0x47, 0x29, 0x07, 0xa0, 0x87, 0xa2, 0x8a, 0x9f, 0x4a, 0xa8, 0x2d, 0x95, 0x73, 0xe0, 0xc0,
	0x69, 0x63, 0x0f, 0xa9, 0xd5, 0x8d, 0xd7, 0xdd, 0x5d, 0x57, 0xca, 0x15, 0x09, 0xf1, 0x00, 0x1c,
	0x79, 0x2c, 0x5e, 0x81, 0x33, 0x2f, 0xc0, 0x05, 0xed, 0x26, 0x8e, 0x4d, 0x6a, 0x2c, 0xf5, 0xb6,
	0xbb, 0xf3, 0x7d, 0xdf, 0xce, 0x7c, 0x33, 0xbb, 0xb0, 0x93, 0x08, 0xae, 0xf8, 0x90, 0x32, 0xc6,
	0x03, 0xaa, 0x22, 0x1e, 0x0f, 0x2f, 0x47, 0x94, 0x25, 0x67, 0x74, 0x54, 0x38, 0xf3, 0x0c, 0x88,
	0xb4, 0xb2, 0x90, 0xd3, 0x9b, 0x72, 0x3e, 0x65, 0x38, 0xa4, 0x49, 0x34, 0xa4, 0x71, 0xcc, 0x95,
	0x81, 0xc9, 0x05, 0xce, 0xfd, 0x5d, 0x87, 0x3b, 0x07, 0x2b, 0xb2, 0x8f, 0x17, 0x29, 0x4a, 0x45,
	0x7a, 0xd0, 0x8e, 0xe9, 0x0c, 0x65, 0x42, 0x03, 0xb4, 0xad, 0xbe, 0x35, 0x68, 0xfb, 0xf9, 0x01,
	0xf9, 0x00, 0x5b, 0xb3, 0x94, 0xa9, 0xe8, 0x35, 0x4b, 0xa5, 0x42, 0x31, 0x46, 0xa5, 0xa2, 0x78,
	0x6a, 0xd7, 0xfa, 0xd6, 0xa0, 0xb3, 0x7b, 0xdf, 0xcb, 0x6e, 0xf6, 0x8e, 0xaf, 0x82, 0xfc, 0x32,
	0x26, 0xf9, 0x08, 0x8e, 0xc0, 0x8b, 0x34, 0x12, 0x18, 0x1e, 0xd2, 0x19, 0x8e, 0x51, 0x5c, 0xea,
	0x20, 0xc3, 0x40, 0x71, 0x61, 0xd7, 0x8d, 0xee, 0xdd, 0x5c, 0xf7, 0x88, 0x4e, 0x90, 0x65, 0x61,
	0xbf, 0x82, 0x4a, 0x3e, 0x41, 0x2f, 0x11, 0xf8, 0x19, 0x45, 0x69, 0x58, 0xda, 0x1b, 0xfd, 0x7a,
	0x95, 0x74, 0x25, 0x99, 0x9c, 0x00, 0xc8, 0xe0, 0x0c, 0xc3, 0x94, 0xe9, 0xea, 0x1b, 0x7d, 0x6b,
	0xb0, 0xb9, 0xeb, 0xe5, 0x52, 0x57, 0x5c, 0xf5, 0xc6, 0x2b, 0xf4, 0x58, 0x09, 0xaa, 0x70, 0x3a,
	0xf7, 0x0b, 0x0a, 0x64, 0x04, 0xed, 0x19, 0x2a, 0x7a, 0x4a, 0x55, 0x70, 0x66, 0x37, 0x4d, 0xd1,
	0x5b, 0x05, 0x33, 0xb3, 0x90, 0x9f, 0xa3, 0xdc, 0x11, 0x90, 0xab, 0xa2, 0x04, 0xa0, 0x79, 0x4a,
	0x83, 0x73, 0x0c, 0xbb, 0x37, 0xc8, 0x6d, 0xe8, 0xbc, 0x89, 0xa4, 0x12, 0xd1, 0x24, 0x55, 0x18,
	0x76, 0x2d, 0xf7, 0x8f, 0x05, 0xa4, 0x98, 0x9a, 0x4c, 0x78, 0x2c, 0x91, 0x3c, 0x81, 0xcd, 0xe9,
	0xaa, 0xc6, 0x13, 0x3a, 0x43, 0xd3, 0xce, 0xb6, 0xbf, 0x76, 0x4a, 0x0e, 0xa1, 0x91, 0x70, 0xa1,
	0xa4, 0x5d, 0x37, 0xd6, 0x8d, 0xca, 0xeb, 0x5d, 0x88, 0x7a, 0x05, 0xd7, 0x14, 0x55, 0xa9, 0x3c,
	0xe5, 0x42, 0xf9, 0x0b, 0x3e, 0xb1, 0xe1, 0x26, 0x0d, 0x43, 0x81, 0x52, 0x77, 0x41, 0xdf, 0x94,
	0x6d, 0x89, 0x03, 0xad, 0x98, 0x87, 0x68, 0x92, 0x68, 0x98, 0xd0, 0x6a, 0xef, 0xec, 0xc3, 0x76,
	0x99, 0x28, 0x21, 0xb0, 0xa1, 0xe7, 0x73, 0x39, 0xab, 0x66, 0xad, 0xcf, 0xf4, 0x55, 0xa6, 0x90,
	0x86, 0x6f, 0xd6, 0x6e, 0x02, 0x5b, 0x25, 0x53, 0xa9, 0x93, 0xc1, 0x98, 0x4e, 0x18, 0x86, 0x46,
	0xa1, 0xe5, 0x67, 0x5b, 0xf2, 0x0a, 0x36, 0x13, 0xce, 0xa2, 0x60, 0xbe, 0x1a, 0xc7, 0x5a, 0xf5,
	0x38, 0xae, 0xc1, 0xdd, 0x6f, 0x35, 0x68, 0xaf, 0x7a, 0x47, 0x9e, 0x43, 0x93, 0x69, 0xb8, 0xb4,
	0x2d, 0xe3, 0xdf, 0xc3, 0x92, 0x06, 0x2f, 0x04, 0xe5, 0xdb, 0x58, 0x89, 0xb9, 0xbf, 0x84, 0x93,
	0x77, 0xd0, 0x29, 0x3c, 0x5e, 0xbb, 0x66, 0xd8, 0x8f, 0xcb, 0xd8, 0x07, 0x39, 0x6c, 0x21, 0x51,
	0x24, 0x3a, 0x2f, 0xa1, 0x53, 0x90, 0x27, 0x5d, 0xa8, 0x9f, 0xe3, 0x7c, 0x69, 0x9b, 0x5e, 0x92,
	0x6d, 0x68, 0x5c, 0x52, 0x96, 0x66, 0xfd, 0x5f, 0x6c, 0xf6, 0x6a, 0x2f, 0x2c, 0x67, 0x1f, 0xba,
	0xeb, 0xda, 0xd7, 0xe1, 0xbb, 0x3f, 0x2c, 0xb8, 0xf5, 0x8f, 0x57, 0xe4, 0x3d, 0x74, 0x66, 0x3a,
	0xe7, 0xa3, 0xa2, 0x25, 0x83, 0xff, 0x38, 0xeb, 0x1d, 0xe7, 0xd0, 0x65, 0x61, 0x05, 0xb2, 0xce,
	0x6e, 0x1d, 0x70, 0x9d, 0xec, 0x76, 0xbf, 0x5a, 0xc5, 0x8f, 0x50, 0x0f, 0x58, 0x14, 0x20, 0x49,
	0xa0, 0xb5, 0x3c, 0x44, 0x72, 0xaf, 0xe2, 0x6d, 0x3b, 0xbd, 0xaa, 0x87, 0xe0, 0x3e, 0xfd, 0xf2,
	0xf3, 0xd7, 0xf7, 0xda, 0x23, 0xf7, 0x41, 0xfe, 0x63, 0xeb, 0x77, 0x25, 0xcd, 0x18, 0xe7, 0x7f,
	0xf7, 0x9e, 0xb5, 0x33, 0x69, 0x9a, 0x7f, 0xf9, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x62, 0xb9, 0x64, 0xed, 0x05, 0x00, 0x00,
}
